<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/6/22
 * Time: 10:43
 * Comment: 基本控制器
 */

namespace app\api\controller;

use think\Controller;
use think\Request;
use think\Validate;

class BaseController extends Controller {

    /**
     * 声明请求实例
     */
    protected  $request;        //用来出来参数

    protected $validater;       //用来验证数据

    protected $params;          //过滤后符合要求的参数

    protected $rules = array(
        'User'  => array(
            'login' => array(
                'user_name' => ['require', 'chsDash', 'max' => 20],
                'user_pwd'  => 'require|length:32'
            ),
        ),
    );

    /**
     * 初始化函数
     */
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->request = Request::instance();
        /*$this->check_time($this->request->only(['time']));
        $this->check_token($this->request->param());*/
        $this->params = $this->check_params($this->request->except(['time', 'token']));
    }

    /**
     * 验证请求是否超时
     * @param $arr
     */
    public function check_time($arr) {
        if (!isset($arr['time']) || intval($arr['time']) <= 1) {
            $this->return_msg(400, '时间戳不存在');
        }
        if (time() - intval($arr['time']) > 60) {
            $this->return_msg(401, '请求超时');
        }
    }

    /**
     * @param $arr
     */
    public function check_token($arr) {
        if (!isset($arr['token']) || empty($arr['token'])) {
            $this->return_msg(400, 'token不能为空');
        }

        $app_token = $arr['token'];         //api传过来的token
        //服务器端生成token
        unset($arr['token']);
        $service_token = '';
        foreach ($arr as $key => $value) {
            $service_token .= md5($value);
        }
        $service_token = md5('api_'.$service_token . '_api');
        /*dump($service_token);die();*/
        //对比token，返回结果
        if ($app_token !== $service_token) {
            $this->return_msg(400, 'token值不正确');
        }
    }

    /**
     * 验证参数
     * @param $arr
     */
    public function check_params($arr) {
        //获取参数的验证规则
        $rule = $this->rules[$this->request->controller()][$this->request->action()];
        //验证参数
        $this->validater = new Validate();
        if (!$this->validater->check($arr)) {
            $this->return_msg(400, $this->validater->getError());
        }
        //如果正常，通过验证
        $this->params = $arr;
    }

    /**
     * @param $code
     * @param string $msg
     * @param array $data
     */
    public function return_msg($code, $msg = '', $data = []) {

        $return_data['code'] = $code;
        $return_data['msg'] = $msg;
        $return_data['data'] = $data;

        echo json_encode($return_data);
        die;
    }

    public function check_username($username) {
        $is_email = Validate::is($username, 'email')?1:0;
        $is_phone = preg_match('/^1[34578]\d{9}$/', $username)?4:2;

        $flag = $is_email + $is_phone;
        switch ($flag) {
            case  2:
                $this->return_msg(400, '邮箱或者手机号不正确');
                break;
            case 3:
                return 'email';
                break;
            case 4:
                return 'phone';
                break;
        }
    }
}